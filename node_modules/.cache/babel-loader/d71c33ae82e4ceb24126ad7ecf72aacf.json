{"ast":null,"code":"var _jsxFileName = \"/Users/danielto/Documents/GitHub/Git Projects/Meme Generator/my-app/src/App.js\";\nimport './App.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImg: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const {\n        memes\n      } = response.data;\n      this.setState({\n        allMemeImg: memes\n      });\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const randomNumber = Math.floor(Math.random() * this.state.allMemeImg.length);\n    const randomMemeImage = this.state.allMemeImg[randomNumber].url;\n    this.setState({\n      randomImg: randomMemeImage\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"memeGenerator\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \" Meme Generator \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Top Text\",\n          name: \"topText\",\n          value: this.state.topText,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Bottom Text\",\n          name: \"bottomText\",\n          value: this.state.bottomText,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Generate Meme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"topText\",\n          children: this.state.topText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"image\",\n          src: this.state.randomImg,\n          alt: \"randomImage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"bottomText\",\n          children: this.state.bottomText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/danielto/Documents/GitHub/Git Projects/Meme Generator/my-app/src/App.js"],"names":["React","Component","App","constructor","state","topText","bottomText","randomImg","allMemeImg","handleChange","bind","handleSubmit","componentDidMount","fetch","then","response","json","memes","data","setState","event","preventDefault","randomNumber","Math","floor","random","length","randomMemeImage","url","name","value","target","render"],"mappings":"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","sourcesContent":["import './App.css' \nimport React, {Component} from \"react\"\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImg: []\n    }\n      this.handleChange = this.handleChange.bind(this)\n      this.handleSubmit = this.handleSubmit.bind(this)\n\n    }\n\n    \n  componentDidMount(){\n    fetch(\"https://api.imgflip.com/get_memes\")\n    .then(response => response.json())\n    .then(response=> {\n      const {memes} = response.data\n      this.setState({ allMemeImg: memes })\n    })\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    const randomNumber = Math.floor(Math.random() * this.state.allMemeImg.length)\n    const randomMemeImage = this.state.allMemeImg[randomNumber].url\n    this.setState({ randomImg: randomMemeImage })\n\n  }\n\n\n  handleChange(event) {\n    const {name, value} = event.target\n    this.setState({ [name] : value})\n    \n  }\n\n \n  render() {\n    return (\n      <div className=\"memeGenerator\">\n        <h1 className=\"title\"> Meme Generator </h1>\n        <form className=\"form\" onSubmit= {this.handleSubmit}>\n          <input type=\"text\" placeholder=\"Top Text\" name=\"topText\" value={this.state.topText} onChange={this.handleChange}/>\n          <input type=\"text\" placeholder=\"Bottom Text\" name=\"bottomText\" value={this.state.bottomText} onChange={this.handleChange}/>\n          <button>Generate Meme</button>\n        </form>\n        \n        <div className=\"meme\">\n        <h2 className=\"topText\">{this.state.topText}</h2>\n        <img className=\"image\" src={this.state.randomImg} alt=\"randomImage\" />\n        \n        <h2 className=\"bottomText\">{this.state.bottomText}</h2>\n        \n        </div>\n        \n        \n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}